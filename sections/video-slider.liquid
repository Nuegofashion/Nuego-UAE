{{ 'video-section.css' | asset_url | stylesheet_tag }}
{{ 'component-deferred-media.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{%- liquid
  assign video_id = section.settings.video.id | default: section.settings.video_url.id
  assign video_alt = section.settings.video.alt | default: section.settings.description
  assign alt = 'sections.video.load_video' | t: description: video_alt | escape
  assign poster = section.settings.video.preview_image | default: section.settings.cover_image

  if section.settings.video != null
    assign ratio_diff = section.settings.video.aspect_ratio | minus: poster.aspect_ratio | abs
    if ratio_diff < 0.01 and ratio_diff > 0
      assign fix_ratio = true
    endif
  endif
-%}

{%- capture sizes -%}
  {% if section.settings.full_width -%}
    100vw
  {%- else -%}
    (min-width: {{ settings.page_width }}px) {{ settings.page_width | minus: 100 }}px, (min-width: 750px)
    calc(100vw - 10rem), 100vw
  {%- endif %}
{%- endcapture -%}

{{ 'trending_campaigns.css' | asset_url | stylesheet_tag }}
{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
  .trending_campaigns {
    background-color:{{ section.settings.bg_color }};
  }
  @media only screen and (max-width: 660px){
    .trending_campaigns {
      margin-top: 0px;
    }
  }
{%- endstyle -%}
<div
  class="trending_campaigns padding_top section-{{ section.id }}-padding"
  data-id="template--{{ section.id }}__trending_campaigns_VYyPkb"
>
  <div class="start_div">
    <h2 class="title">{{ section.settings.title }}</h2>
    <p class="sub_heading">{{ section.settings.sub_title }}</p>
    <div class="swiper myTrendingCampaignSwiper">
      <div class="swiper-wrapper">
        {%- if section.blocks.size > 0 -%}
          {%- for block in section.blocks -%}
            <div class="swiper-slide">
              <div class="trending_campaigns_videos ">
                   <deferred-media
                      class="video-section__media deferred-media gradient global-media-settings"
                      data-media-id="{{ video_id }}"
                      {% if block.settings.video_thumb != null %}
                        style="--ratio-percent: {{ 1 | divided_by: block.settings.video_thumb.aspect_ratio | times: 100 }}%;"
                      {% endif %}
                    >
                      <button
                        id="Deferred-Poster-Modal-{{ video_id }}"
                        class="video-section__poster media deferred-media__poster media--landscape"
                        type="button"
                        aria-label="{{ alt }}"
                      >
                        {%- if block.settings.video_thumb != null -%}
                          {{
                            block.settings.video_thumb
                            | image_url: width: 3840
                            | image_tag: sizes: sizes, widths: '375, 750, 1100, 1500, 1780, 2000, 3000, 3840', alt: alt
                          }}
                        {%- else -%}
                          {{ 'hero-apparel-3' | placeholder_svg_tag: 'placeholder-svg placeholder' }}
                        {%- endif -%}
                        <span class="deferred-media__poster-button motion-reduce">
                          {%- render 'icon-play' -%}
                        </span>
                      </button>
                      <template> 
                          {{
                            block.settings.video
                            | video_tag:
                              image_size: '1100x',
                              autoplay: true, 
                              controls: true,
                              muted: false
                          }} 
                      </template>
                    </deferred-media>  
              </div>
            </div>
          {%- endfor -%}
        {%- endif -%}
      </div>
    </div>
    <div
      class="swiper-pagination swiper-pagination-clickable swiper-pagination-bullets swiper-pagination-horizontal"
    ></div>
  </div>
</div>
 
{% schema %}
{
  "name": "Video Slider", 
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title"
    },
    {
      "type": "text",
      "id": "sub_title",
      "label": "Sub Title"
    },
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background color",
      "default": "#FFFFFF"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    } 
  ],
  "blocks": [
    {
      "type": "quote",
      "name": "Video Slider",
      "settings": [
        {
          "type": "image_picker",
          "id": "video_thumb",
          "label": "Video Thumb"
        },
        {
          "type": "video",
          "id": "video",
          "label": "t:sections.video.settings.video.label"
        } 
      ]
    }
  ],
  "presets": [
    {
      "name": "Video Slider"
    }
  ]
}
{% endschema %}
<script>
  function trendingCampaignsScript() {
    let myTrendingCampaignSwipertemplate22211986915627trending_campaigns_VYyPkb = new Swiper(`[data-id="template--{{ section.id }}__trending_campaigns_VYyPkb"] .swiper`, {
      loop: true,
      slidesPerView: 'auto',
      pagination: {
        el: `[data-id="template--{{ section.id }}__trending_campaigns_VYyPkb"] .swiper-pagination`,
        clickable: true,
      },
      breakpoints: {
        300: {
          slidesPerView: 1.2,
          centeredSlides: false,
          spaceBetween: 6.5,
          slidesOffsetAfter: 50,
        },
        600: {
          slidesPerView: 'auto',
          spaceBetween: 6.5,
        },
        1200: {
          slidesPerView: 'auto',
          spaceBetween: 6.5,
        },
      },
    });

  var videos = document.querySelectorAll('.trending_campaigns_video video');
  var playButtons = document.querySelectorAll('.trending_campaigns_video .play-button');

  function togglePlay(video, playButton) {
    if (video.paused) {
      video.play();
      playButton.style.display = 'none';
    } else {
      video.pause();
      playButton.style.display = 'block';
    }
  }
  videos.forEach((video, index) => {
    var playButton = playButtons[index];
    playButton.addEventListener('click', function () {
      togglePlay(video, playButton);
    });
    video.addEventListener('click', function () {
      togglePlay(video, playButton);
    });
  });

  // Lazy Load Video
    var lazyVideos = [].slice.call(document.querySelectorAll(".trending_campaigns video.trending_campaigns_video"));

    if ("IntersectionObserver" in window) {
      var lazyVideoObserver = new IntersectionObserver(function(entries, observer) {
        entries.forEach(function(video) {
          if (video.isIntersecting) {
            for (var source in video.target.children) {
              var videoSource = video.target.children[source];
              if (typeof videoSource.tagName === "string" && videoSource.tagName === "SOURCE") {
                videoSource.src = videoSource.dataset.src;
              }
            }

            video.target.load();
            video.target.classList.remove("lazy");
            lazyVideoObserver.unobserve(video.target);
          }
        });
      });

      lazyVideos.forEach(function(lazyVideo) {
        lazyVideoObserver.observe(lazyVideo);
      });
    }
  }
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", trendingCampaignsScript, {once: true})
  }
  else {
    trendingCampaignsScript();
  }
</script>
