<script>
  let productModal = document.querySelector('[data-id="productAtbModal"]');
let productAtbModalOverlay = document.querySelector('[data-id="productAtbModalOverlay"]');
let colourCount = document.querySelector('[data-id="colourCount"]');
let closeATBModalButton = document.querySelector('[data-id="closeATBModal"]');
let modalBartoClose = document.querySelector('[data-id="modalBartoClose"]');
let cartDrawer = document.querySelector('cart-drawer');

let scrollableSwiperContainers = productModal.querySelector('.product-variant-swiper-container');
let swiperColorVariantsParent = document.querySelector('[data-id="swiperColorVariants"]');
let swiperSizeVariantsParent = document.querySelector('[data-id="swiperSizeVariants"]');

// Size Tool Tip
let sizeError = document.querySelector('[data-id="sizeError"]');
let sizeToolTip = document.querySelector('[data-id="sizeToolTip"]');
let sizeToolTipInfo1 = document.querySelector('[data-id="sizeToolTip"] [data-id="size-1"]');
let sizeToolTipInfo2 = document.querySelector('[data-id="sizeToolTip"] [data-id="size-2"]');

// Action Buttons
let actionButtonsContainer = document.querySelector('[data-id="actionButtonsContainer"]');
let ATBQtyContainer = document.querySelector('[data-id="ATBQtyContainer"]');
let ATBButton = document.querySelector('[data-id="ATBButton"]');
let updateButton = document.querySelector('[data-id="updateButton"]');
let deleteButton = document.querySelector('[data-id="deleteButton"]');
let atbQtyInput = document.querySelector('[data-id="atbQtyInput"]');
let viewProductLink = document.querySelector('[data-id="viewProductLink"]');
let qtyInputArr = document.querySelectorAll('[data-id="qtyInput"]');

// For Active Data Object based on the Product for which the Modal is Open
let ACTIVEDATAOBJECT = {};
let CARTDATAITEMS = [];
let closeModalAfterAnimationEnds = 1800; //1.8s To Close Modal After Add Bag Animation Ends
let ATBModalTouchStartPosition;
let wasDeleteShown = false;
 window.ATBPRODUCTDATA = {};
let cartTotal;
let productPrice;

// Initial Slides
let colorVariantSlides = ['<p class="slideEvent" onclick="myFunction(event)">Main Slide 1</p>', '<p class="slideEvent" onclick="myFunction(event)">Main Slide 2</p>', '<p class="slideEvent" onclick="myFunction(event)">Main Slide 3</p>', '<p class="slideEvent" onclick="myFunction(event)">Main Slide 4</p>'];

let swiperColorVariantsOptions = {
  slidesPerView: 3.5,
  centeredSlides: false,
  spaceBetween: 10,
  navigation: {
    nextEl: '[data-id="swiperColorVariants"] .swiper-next',
    prevEl: '[data-id="swiperColorVariants"] .swiper-prev',
  },
  virtual: {
    slides: colorVariantSlides,
    cache: false,
    addSlidesBefore: 15,
    addSlidesAfter: 15,
  },
};

let sizeVariantSlides = ['<p class="slideEvent" onclick="myFunction(event)">Main Slide 1</p>', '<p class="slideEvent" onclick="myFunction(event)">Main Slide 2</p>', '<p class="slideEvent" onclick="myFunction(event)">Main Slide 3</p>', '<p class="slideEvent" onclick="myFunction(event)">Main Slide 4</p>'];

let swiperSizeVariantsOptions = {
  slidesPerView: 5,
  slidesPerGroup: 1,
  spaceBetween: 9,
  breakpoints: {
    300: {
      slidesPerView: 5.25
    },
    420: {
      slidesPerView: 5.75
    },
    // when window width is >= 640px
    601: {
      slidesPerView: 6,
      spaceBetween: 12,
    },
  },
  navigation: {
    nextEl: '[data-id="swiperSizeVariants"] .swiper-next',
    prevEl: '[data-id="swiperSizeVariants"] .swiper-prev',
  },
  virtual: {
    slides: sizeVariantSlides,
    cache: false,
    addSlidesBefore: 15,
    addSlidesAfter: 15,
  },
};

// .  .._.  .  .     .    ,      .___          ,
// |  | |   |  |._  _| _.-+- _   [__ . .._  _.-+-* _ ._  __
// |__|_|_  |__|[_)(_](_] | (/,  |   (_|[ )(_. | |(_)[ )_)
//              |

function toggleScrolling() {
  if (document.body !== null && document.body.style.overflow === 'hidden') {
    document.body.style.overflow = null;
  } else {
    document.body.style.overflow = 'hidden';
  }
}

function toggleScrollUpButton() {
  let scrollUpbutton = document.querySelector('.scrollUpBtn');
  if (scrollUpbutton !== null && productModal.classList.contains('active') && !scrollUpbutton.classList.contains('super-hidden')) {
    scrollUpbutton.classList.add('super-hidden');
  } else {
    scrollUpbutton.classList.remove('super-hidden');
  }
}

function openATBModal(productCard) {
  if (!productModal.classList.contains('active')) {
    productModal.classList.add('active');
    toggleScrolling();
    toggleScrollUpButton();
    updateCart();

    // Resets the Scroll Position to Top when height of the windows is smaller and user has scrolled on Y-Axis
    scrollableSwiperContainers.scroll(0, 0);

    // Closes Cart if It is open
    // Helps When Adding Product from Cart Product Recommendation
    if (cartDrawer.classList.contains('active')) {
      cartDrawer.close();
    }
    // Product ATB Modal Card Opened from a Modal
    if (productCard.closest('.multi_posture_main_div') !== null) {
      let modal = productCard.closest('.shopify-section .modal');
      if (modal !== null && modal.classList.contains('active')) {
        modal.classList.remove('active');
        toggleScrolling();
      }
    }
  }
}

function closeATBModal() {
  if (productModal.classList.contains('active')) {
    productModal.classList.remove('active');
    toggleScrolling();
    toggleScrollUpButton();
    updateCart();
    // Resets the Scroll Position to Top when height of the windows is smaller and user has scrolled on Y-Axis
    scrollableSwiperContainers.scroll(0, 0);
    // Hides Quantity if Shown and Sets it to Default State
    if (actionButtonsContainer.classList.contains('show-quantity')) {
      actionButtonsContainer.classList.remove('show-quantity');
    }

    if (actionButtonsContainer.classList.contains('add-state')) {
      actionButtonsContainer.classList.remove('add-state');
    }

    if (actionButtonsContainer.classList.contains('update-state')) {
      actionButtonsContainer.classList.remove('update-state');
    }

    if (actionButtonsContainer.classList.contains('in-cart')) {
      actionButtonsContainer.classList.remove('in-cart');
    }

    if (actionButtonsContainer.classList.contains('sold-out')) {
      actionButtonsContainer.classList.remove('sold-out');
    }

    if (actionButtonsContainer.classList.contains('pincode-not-serviceable')) {
      actionButtonsContainer.classList.remove("pincode-not-serviceable")
    }

    // Resets All the Animatable Buttons Stages
    document.querySelectorAll('.atb-button').forEach((animatableButton) => {
      if (animatableButton.classList.contains('stage1')) {
        animatableButton.classList.remove('stage1', 'stage2');
      }
    });

    if (deleteButton.classList.contains('stage1')) {
      deleteButton.classList.remove('stage1', 'stage2');
    }

    actionButtonsContainer.setAttribute('product-id', '');
    actionButtonsContainer.setAttribute('variant-id', '');
    actionButtonsContainer.setAttribute('stock', '');
    actionButtonsContainer.setAttribute('quantity', '');
    actionButtonsContainer.setAttribute('key', '');
    atbQtyInput.setAttribute('max', 10);
    atbQtyInput.value = 1;

    swiperSizeVariantsParent.querySelector('.swiper-buttons').classList.remove('hide');

    updateButton.removeEventListener('transitionend', closeATBModalAfterDelay);
    ATBButton.removeEventListener('transitionend', closeATBModalAfterDelay);
  }
}

function closeATBModalonCartOpen() {
  closeATBModal();
}

function closeATBModalAfterDelay(event, delay = closeModalAfterAnimationEnds) {
  setTimeout(() => {
    closeATBModal();
  }, delay);
  event.target.removeEventListener('transitionstart', closeATBModalAfterDelay);
}

function setColorCount(count) {
  colourCount.innerText = `(${count} Colour)`;
}

//  __.                  .___          ,
// (__ .    ,*._  _ ._.  [__ . .._  _.-+-* _ ._  __
// .__) \/\/ |[_)(/,[    |   (_|[ )(_. | |(_)[ )_)
//            |

// Destroy Swiper
function destroySwiper(swiper) {
  swiper.wrapperEl.innerHTML = '';
  swiper.destroy();
  swiper = undefined;
  return swiper;
}

// Set Size Swiper Data
function setDataSizeVariantSlides(slides, breakpoint, swiperOptions) {
  if (slides.length < breakpoint) {
    // Single Row for Lesser Size Variants
    // Cleans Array
    sizeVariantSlides.splice(0, sizeVariantSlides.length);
    // Pushes New Slides Data
    for (const slide of slides) {
      sizeVariantSlides.push(slide);
    }

    // Slides to Keep in DOM
    swiperSizeVariantsOptions.virtual.addSlidesAfter = slides.length;
    swiperSizeVariantsOptions.virtual.addSlidesBefore = slides.length;

    // Removing Grid CSS Class
    if (swiperSizeVariantsParent.classList.contains('size-button-grid')) {
      swiperSizeVariantsParent.classList.remove('size-button-grid');
    }
  } else {
    // Second Row for More Size Variants
    // Cleans Array
    sizeVariantSlides.splice(0, sizeVariantSlides.length);

    // Pushes New Slides Data
    for (let i = 0; i < slides.length / 2; i++) {
      sizeVariantSlides.push(slides[i]);
    }

    let secondfHalf = 0;
    if (slides.length % 2 === 0) {
      secondfHalf = slides.length / 2;
    } else {
      secondfHalf = Math.round(slides.length / 2);
    }
    let j = 0;
    for (let i = secondfHalf; i <= slides.length; i++) {
      if (slides[i] !== undefined) {
        sizeVariantSlides[j] = sizeVariantSlides[j] + slides[i];
      }
      j++;
    }

    // Slides to Keep in DOM
    swiperSizeVariantsOptions.virtual.addSlidesAfter = slides.length;
    swiperSizeVariantsOptions.virtual.addSlidesBefore = slides.length;

    // Adding CSS Class for Swiper Grid
    if (!swiperSizeVariantsParent.classList.contains('size-button-grid')) {
      swiperSizeVariantsParent.classList.add('size-button-grid');
    }
  }
}

// Set View Product Link
function setViewProductLink(setVariantID = false, linkOrId) {
  if (setVariantID) {
    // Sets View Product Link
    let href = viewProductLink.getAttribute('href');
    let productLink;
    if (href.includes('?variant=')) {
      productLink = href.split('?variant=')[0];
    } else {
      productLink = href;
    }
    let productLinkWithVariantID = `${productLink}?variant=${linkOrId}`;
    viewProductLink.setAttribute('href', productLinkWithVariantID);
  } else {
    viewProductLink.setAttribute('href', linkOrId);
  }
}

// Select Color Variant
function selectColorVariant(event, colorVariantID) {
  // Avoid Uneccesary Render if the Color is Already Selected or The Button is Already Clicked
  if (!event.currentTarget.classList.contains('selected')) {

    // Resets Button State on Changing Color Variants
    if (actionButtonsContainer.classList.contains('show-quantity')) {
      actionButtonsContainer.classList.remove('show-quantity');
    }
    if (actionButtonsContainer.classList.contains('update-state')) {
      actionButtonsContainer.classList.remove('update-state');
    }
    if (actionButtonsContainer.classList.contains('update-state')) {
      actionButtonsContainer.classList.remove('update-state');
    }
    if (actionButtonsContainer.classList.contains('delete-state')) {
      actionButtonsContainer.classList.remove('delete-state');
    }
    if (actionButtonsContainer.classList.contains('in-cart')) {
      actionButtonsContainer.classList.remove('in-cart');
    }
    if (!actionButtonsContainer.classList.contains('add-state')) {
      actionButtonsContainer.classList.add('add-state');
    }

    // Resets All the Animatable Buttons Stages
    document.querySelectorAll('.atb-button').forEach((animatableButton) => {
      if (animatableButton.classList.contains('stage1')) {
        animatableButton.classList.remove('stage1', 'stage2');
      }
    });

    if (deleteButton.classList.contains('stage1')) {
      deleteButton.classList.remove('stage1', 'stage2');
    }

    // Hide Error - Select Size
    if (sizeError !== null && sizeError.classList.contains('show')) {
      sizeError.classList.remove('show');
    }

    // Sets View Product Link
    setViewProductLink(false, event.currentTarget.getAttribute('product-link'));

    // Sets Product ID on Action Button Conatiner
    actionButtonsContainer.setAttribute('product-id', event.currentTarget.getAttribute('product-id'));
    // Resets The Data On Action Button
    actionButtonsContainer.setAttribute('variant-id', '');
    actionButtonsContainer.setAttribute('stock', '');
    actionButtonsContainer.setAttribute('quantity', '');
    atbQtyInput.setAttribute('max', 10);
    atbQtyInput.value = 1;

    // Sets Active Class on Click
    swiperColorVariantsParent.querySelectorAll('.color-variant-card').forEach((domNode) => {
      if (domNode === event.currentTarget) {
        event.currentTarget.classList.add('selected');
      } else {
        domNode.classList.remove('selected');
      }
    });

    // Destroy Swiper to Re Initialize with new data
    destroySwiper(swiperSizeVariants);
    // Extract Color Variant OBJECT form Active Product Object
    let colorVariantObject = ACTIVEDATAOBJECT.dataForSlides.filter((obj) => obj.id === colorVariantID);
    // Cleans and Set "sizeVariantSlides"
    setDataSizeVariantSlides(colorVariantObject[0].sizeVariantSlides, 13);

    if (colorVariantObject[0].sizeVariantSlides.length < 6) {
      swiperSizeVariantsParent.querySelector('.swiper-buttons').classList.add('hide');
    } else {
      swiperSizeVariantsParent.querySelector('.swiper-buttons').classList.remove('hide');
    }

    // Initialize Swiper
    swiperSizeVariants = new Swiper('[data-id="swiperSizeVariants"] .swiper', swiperSizeVariantsOptions);

    fetchCart();
  }
}

function setStockLimitation(stock) {
  if (stock < 10 && stock >= 1) {
    atbQtyInput.setAttribute('max', stock);
  } else {
    atbQtyInput.setAttribute('max', 10);
  }
}

function setInputQuantity(variantId) {
  if (isInCart(variantId, 'quantity')) {
    atbQtyInput.value = isInCart(variantId, 'quantity');
    actionButtonsContainer.setAttribute('quantity', isInCart(variantId, 'quantity'));
    if (!actionButtonsContainer.classList.contains('in-cart')) {
      actionButtonsContainer.classList.add('in-cart');
    }
  } else {
    if (actionButtonsContainer.classList.contains('in-cart')) {
      actionButtonsContainer.classList.remove('in-cart');
    }
    atbQtyInput.value = 1;
    actionButtonsContainer.setAttribute('quantity', 1);
  }
  // Validates and Sets Quantity Rules on Input Field
  document.querySelector('plp-quantity-input').validateQtyRules();
}

function setATBButtonState(variantId) {
  updateButton.removeEventListener('transitionend', closeATBModalAfterDelay);
  ATBButton.removeEventListener('transitionend', closeATBModalAfterDelay);

  if (isInCart(variantId)) {
    if (!actionButtonsContainer.classList.contains('update-state')) {
      actionButtonsContainer.classList.add('update-state');
    }

    if (actionButtonsContainer.classList.contains('add-state')) {
      actionButtonsContainer.classList.remove('add-state');
    }
  } else {
    actionButtonsContainer.classList.add('add-state');
    actionButtonsContainer.classList.remove('update-state');
  }
}

function setLineItemKey(variantId) {
  actionButtonsContainer.setAttribute('key', isInCart(variantId) ? isInCart(variantId) : '');
}

function setDeleteButtonState(variantId) {
  actionButtonsContainer.classList.remove('delete-state');
  if (isInCart(variantId, 'quantity') === 1 && !actionButtonsContainer.classList.contains('delete-state')) {
    actionButtonsContainer.classList.add('delete-state');
  } else if (isInCart(variantId, 'quantity') > 1 && actionButtonsContainer.classList.contains('delete-state')) {
    actionButtonsContainer.classList.remove('delete-state');
  }
}

// Select Size Variant
function selectSizeVariant(event) {
  // Shows Quantity Input
  if (!actionButtonsContainer.classList.contains('show-quantity')) {
    actionButtonsContainer.classList.add('show-quantity');
  }

  // Hide Error - Select Size
  if (sizeError !== null && sizeError.classList.contains('show')) {
    sizeError.classList.remove('show');
  }

  // Set View Product Link with Variant ID
  setViewProductLink(true, event.currentTarget.getAttribute('variant-id'));

  // Sets Variant ID on Action Button
  actionButtonsContainer.setAttribute('variant-id', event.currentTarget.getAttribute('variant-id'));
  // Sets Stock on Action Button
  actionButtonsContainer.setAttribute('stock', event.currentTarget.getAttribute('stock'));

  // Set Quantity Validation Limit
  setStockLimitation(event.currentTarget.getAttribute('stock'));
  // Sets Input Quantity
  setInputQuantity(event.currentTarget.getAttribute('variant-id'));
  // Set Key if in Variant is in Cart
  setLineItemKey(event.currentTarget.getAttribute('variant-id'));
  // Update State or Add State
  setATBButtonState(event.currentTarget.getAttribute('variant-id'));
  // Delete Button State
  setDeleteButtonState(event.currentTarget.getAttribute('variant-id'));

  if (ATBButton.classList.contains('stage1')) {
    ATBButton.classList.remove('stage1', 'stage2');
  }
  if (deleteButton.classList.contains('stage1')) {
    deleteButton.classList.remove('stage1', 'stage2');
  }

  // Validates and Sets Quantity Rules on Input Field
  document.querySelector('plp-quantity-input').validateQtyRules();

  swiperSizeVariantsParent.querySelectorAll('.size-button').forEach((domNode) => {
    if (domNode === event.currentTarget) {
      event.currentTarget.classList.add('selected');
    } else {
      domNode.classList.remove('selected');
    }
  });

  // set product price
  productPrice = parseInt(document.querySelector('.size-button.selected').getAttribute('price'))/100;
}

// Tooltip Functions
function showSizeToolTip(event) {
  // Check if the device supports touch events
  // Disables Size Tool Tip on Touch Devices
  if ((event.currentTarget.getAttribute('tool-tip-title-1') !== '' && event.currentTarget.getAttribute('tool-tip-info-1') !== '') || (event.currentTarget.getAttribute('tool-tip-title-2') !== '' && event.currentTarget.getAttribute('tool-tip-info-2') !== '')) {
    if (!('ontouchstart' in window || navigator.maxTouchPoints)) {

      sizeToolTipInfo1.querySelector('.title').innerText = event.currentTarget.getAttribute('tool-tip-title-1');
      sizeToolTipInfo1.querySelector('.size').innerText = event.currentTarget.getAttribute('tool-tip-info-1');
      sizeToolTipInfo2.querySelector('.title').innerText = event.currentTarget.getAttribute('tool-tip-title-2');
      sizeToolTipInfo2.querySelector('.size').innerText = event.currentTarget.getAttribute('tool-tip-info-2');

      // let parentPos = event.currentTarget.closest('.swiper-wrapper').getBoundingClientRect();
      let parentPos = productModal.querySelector('.modal-atb')?.getBoundingClientRect();
      let childPos = event.currentTarget.getBoundingClientRect();

      let relativePos = {};

      relativePos.top = childPos.top - parentPos.top;
      relativePos.right = Math.abs(childPos.right - parentPos.right);
      relativePos.bottom = Math.abs(childPos.bottom - parentPos.bottom);
      relativePos.left = childPos.left - parentPos.left;

      if( relativePos.left > 180 ) {
        sizeToolTip.style.top = Math.abs(childPos.top - parentPos.top) + 73 + 'px';
        sizeToolTip.style.right = Math.abs(childPos.right - parentPos.right) + 5 + 'px';
        sizeToolTip.classList.add('right-arrow');
        sizeToolTip.style.left = 'unset';
        sizeToolTip.style.bottom = 'unset';
      } else {
        sizeToolTip.style.top = Math.abs(childPos.top - parentPos.top) + 73 + 'px';
        sizeToolTip.style.left = Math.abs(childPos.left - parentPos.left) + 5 + 'px';
        sizeToolTip.classList.remove('right-arrow');
        sizeToolTip.style.right = 'unset';
        sizeToolTip.style.bottom = 'unset';
      }

      if (!sizeToolTip.classList.contains('show')) {
        sizeToolTip?.classList.add('show');
      }
    }
  }
}

function hideSizeToolTip() {
  if (sizeToolTip.classList.contains('show')) {
    sizeToolTip?.classList.remove('show');
  }
}

function isInCart(variantId, key = 'key') {
  if (typeof variantId !== 'number') {
    variantId = parseInt(variantId);
  }
  let itemInCart = CARTDATAITEMS.find((item) => {
    return item.id === variantId;
  });
  if (itemInCart !== undefined) {
    return itemInCart[`${key}`];
  } else {
    return false;
  }
}

// Fetch Functions
function fetchCart() {
  fetch('/cart.js')
    .then((response) => response.json())
    .then((cart) => {
      CARTDATAITEMS = [...cart.items];
      updateCart();
    })
    .catch((error) => {
      console.error('Error: Fetching Cart', error);
    });
}

function addItemToCart(variantID, qty, button) {
  // Shows Quantity Input
  if (actionButtonsContainer.classList.contains('show-quantity') && qty >= 1 && qty <= 10) {
    let formData = { items: [{ id: variantID, quantity: qty }] };
    fetch('/cart/add.js', {
      method: 'POST',
      body: JSON.stringify(formData),
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
      },
    })
      .then((response) => response.json())
      .then((cart) => {
        if (cart.status === 422) {
          actionButtonsContainer.classList.add('sold-out');
        } else {
          let itemAddedinCart = CARTDATAITEMS.find(({ id }) => id === cart.items[0].id);
          if (itemAddedinCart !== undefined) {
            itemAddedinCart.quantity = cart.items[0].quantity;
            actionButtonsContainer.setAttribute('key', cart.items[0].key);
          } else {
            CARTDATAITEMS.push(cart.items[0]);
          }
          if (button.classList.contains('stage1')) {
            setTimeout(() => {
              button.classList.add('stage2');
              button.addEventListener('transitionstart', closeATBModalAfterDelay);
            }, 900);
          }
          updateCart();
          if(typeof(addToCartGTMEvent) != 'undefined'){
            addToCartGTMEvent(cart);
            }
        }
      })
      .catch((error) => {
        console.error('Error: Adding Product', error);
      });
  }
}

function updateItemToCart(variantID, qty, button) {
  let formData = {
    id: `${variantID}`,
    quantity: qty,
  };
  fetch('/cart/change.js', {
    method: 'POST',
    body: JSON.stringify(formData),
    headers: {
      'Content-Type': 'application/json',
      'X-Requested-With': 'XMLHttpRequest',
    },
  })
  .then((response) => response.json())
  .then((cart) => {
    if (cart.status === 422) {
      actionButtonsContainer.classList.add('sold-out');
    } else {
      CARTDATAITEMS = [...cart.items];
      if (qty > 0) {
        if (button.classList.contains('stage1')) {
          setTimeout(() => {
            button.classList.add('stage2');
            button.addEventListener('transitionstart', closeATBModalAfterDelay);
          }, 900);
        }
      } else {
        closeATBModal();
      }
      updateCart();
    }
  })
  .catch((error) => {
    console.error('Error adding product to cart:', error);
  });
}

function setEncodedData(productID, event) {
  let productCard = event.currentTarget.closest('[data-id="dataInJson"]');
  let dataDiv = productCard.querySelector(`[data-in-json=${productID}]`);
  let endCodedDataObject = JSON.parse(atob(dataDiv.innerText));
  console.log(endCodedDataObject,"endCodedDataObject"); return false;
  endCodedDataObject.dataForSlides.forEach(arrEl => {
    let arrWithDecodedSlides = [];
    arrEl.sizeVariantSlides.forEach(string => {
      string = atob(string);
      arrWithDecodedSlides.push(string);
    });
    arrEl.sizeVariantSlides.splice(0, arrEl.sizeVariantSlides.length);
    arrEl.sizeVariantSlides = [...arrWithDecodedSlides]
    arrEl.slide[0] = atob(arrEl.slide[0]);
  })

  window.ATBPRODUCTDATA[productID] = {...endCodedDataObject};
  dataDiv.remove();
}

function dataSorting(DATAOBJ, productID) {
  let arrayWithSortedObj = [];
  console.log(DATAOBJ,"dataobj"); return false;
  // Pushes the Matched Object First
  arrayWithSortedObj[0] = DATAOBJ.dataForSlides.filter(obj => obj.id === parseInt(productID))[0];

  // Pushes Rest of the Slides Except the 1st One
  DATAOBJ.dataForSlides.filter(obj => obj.id !== parseInt(productID)).forEach(obj => {
    arrayWithSortedObj.push(obj)
  })

  return arrayWithSortedObj;
}

function checkAndSetPincode() {
  let isPincodeServicable = sessionStorage.getItem("response_status");
  if(isPincodeServicable !== null && isPincodeServicable !== "response-success") {
    actionButtonsContainer.classList.add("pincode-not-serviceable")
  } else {
    actionButtonsContainer.classList.remove("pincode-not-serviceable")
  }
}

function ATBModalOpen(event, productID) {
  
  ACTIVEDATAOBJECT = window.ATBPRODUCTDATA[`d${productID}`];
  if(ACTIVEDATAOBJECT === undefined) {
    setEncodedData(`d${productID}`, event);
    ACTIVEDATAOBJECT = {}
    ACTIVEDATAOBJECT = window.ATBPRODUCTDATA[`d${productID}`];
  }

  // Sorting of Color Variants
  ACTIVEDATAOBJECT.dataForSlides = dataSorting(ACTIVEDATAOBJECT, productID)
  fetchCart(); // Fetch the Latest Cart

  // Checks if Pincode is Servica
  // checkAndSetPincode();
  setColorCount(ACTIVEDATAOBJECT.dataForSlides.length);
  destroySwiper(swiperColorVariants);
  destroySwiper(swiperSizeVariants);

  // Color Variants
  // Update Swiper Data
  // Cleans Array
  colorVariantSlides.splice(0, colorVariantSlides.length);

  // Pushes New Slides Data
  ACTIVEDATAOBJECT.dataForSlides.forEach((dataObj) => {
    colorVariantSlides.push(dataObj.slide);
  });

  // Size Variants
  setDataSizeVariantSlides(ACTIVEDATAOBJECT.dataForSlides[0].sizeVariantSlides, 13);

  if (ACTIVEDATAOBJECT.dataForSlides[0].sizeVariantSlides.length < 6) {
    swiperSizeVariantsParent.querySelector('.swiper-buttons').classList.add('hide');
  }

  // Slides to Keep in DOM
  swiperColorVariantsOptions.virtual.addSlidesAfter = ACTIVEDATAOBJECT.dataForSlides.length;
  swiperColorVariantsOptions.virtual.addSlidesBefore = ACTIVEDATAOBJECT.dataForSlides.length;
  swiperSizeVariantsOptions.virtual.addSlidesAfter = ACTIVEDATAOBJECT.dataForSlides[0].sizeVariantSlides.length;
  swiperSizeVariantsOptions.virtual.addSlidesBefore = ACTIVEDATAOBJECT.dataForSlides[0].sizeVariantSlides.length;

  // Init Swipers
  swiperColorVariants = new Swiper('[data-id="swiperColorVariants"] .swiper', swiperColorVariantsOptions);
  swiperSizeVariants = new Swiper('[data-id="swiperSizeVariants"] .swiper', swiperSizeVariantsOptions);

  
  // Sets Initial Data for Tool Tip
  sizeToolTipInfo1.querySelector('.title').innerText = swiperSizeVariantsParent.querySelector('.size-button').getAttribute('tool-tip-title-1');
  sizeToolTipInfo1.querySelector('.size').innerText = swiperSizeVariantsParent.querySelector('.size-button').getAttribute('tool-tip-info-1');
  sizeToolTipInfo2.querySelector('.title').innerText = swiperSizeVariantsParent.querySelector('.size-button').getAttribute('tool-tip-title-2');
  sizeToolTipInfo2.querySelector('.size').innerText = swiperSizeVariantsParent.querySelector('.size-button').getAttribute('tool-tip-info-2');

  // Sets Active Class
  swiperColorVariantsParent.querySelectorAll('.color-variant-card')[0].classList.add('selected');

  // Sets View Product Link
  let productLink = swiperColorVariantsParent.querySelectorAll('.color-variant-card')[0].getAttribute('product-link');
  viewProductLink.setAttribute('href', productLink);

  // Sets Product ID
  actionButtonsContainer.setAttribute('product-id', swiperColorVariantsParent.querySelectorAll('.color-variant-card')[0].getAttribute('product-id'));

  //If a product has a single variant then the variant should be auto-selected
  if(document.querySelectorAll(".size-button")?.length == 1 ){
    document.querySelector(".size-button").click();
  };

  // Open Modal & Stop Scrolling
  openATBModal(event.currentTarget);
}

// Button Handler Functions
function ATBButtonHandler(event) {
  let id = actionButtonsContainer.getAttribute('variant-id');
  let qty = atbQtyInput.value;
  let totalPrice =  cartTotal + (productPrice * parseInt(qty));
  if (actionButtonsContainer.classList.contains('show-quantity') && actionButtonsContainer.getAttribute('stock') !== '' && actionButtonsContainer.getAttribute('quantity') !== '' && actionButtonsContainer.getAttribute('variant-id') !== '' && totalPrice <= 49999) {
    addItemToCart(id, qty, event.currentTarget);

    if (!event.currentTarget.classList.contains('stage1')) {
      event.currentTarget.classList.add('stage1');
    }
  } else if (sizeError !== null && !sizeError.classList.contains('show') && actionButtonsContainer.getAttribute('variant-id') === '') {
    sizeError.classList.add('show');
  }
  else if (totalPrice > 49999) {
    orderValueExceededMsg();
    closeATBModal();
  }
}

function deleteButtonHandler() {
  let variantToDelete = actionButtonsContainer.getAttribute('variant-id');
  let variantDeletebtn = document.querySelector(`[data-delete-variant-id='${variantToDelete}']`);
  closeATBModal();
  variantDeletebtn.click();

  // Hides Delete Button After This
  if (actionButtonsContainer.classList.contains('delete-state')) {
    actionButtonsContainer.classList.remove('delete-state');
  }
}

function updateButtonHandler(event) {
  let key = actionButtonsContainer.getAttribute('key');
  let prevQty = parseInt(document.querySelector('.quantity__input').value);
  let qty = actionButtonsContainer.getAttribute('quantity');
  let currentTotal = cartTotal - (productPrice * prevQty);
  let newTotal = currentTotal + (productPrice * qty);

  if(newTotal <= 49999) {
    updateItemToCart(key, qty, event.currentTarget);

    if (!event.currentTarget.classList.contains('stage1')) {
      event.currentTarget.classList.add('stage1');
    }
  }
  else{
    closeATBModal();
    orderValueExceededMsg();
  }
}

function modalBartoCloseTouchStartHandler(event) {
  const touch = event.touches[0];
  ATBModalTouchStartPosition = touch.clientY;
}

function modalBartoCloseTouchMoveHandler(event) {
  if (ATBModalTouchStartPosition !== undefined) {
    const touch = event.touches[0];
    const deltaY = touch.clientY - ATBModalTouchStartPosition;
    if (deltaY > 60) {
      // User has dragged down enough to close the modal
      closeATBModal();
    }
  }
}

function modalBartoCloseTouchEndHandler(event) {
  ATBModalTouchStartPosition = undefined;
}

class PLPQuantityInput extends HTMLElement {
  constructor() {
    super();
    this.input = this.querySelector('input');
    this.changeEvent = new Event('change', { bubbles: true });
    this.input.addEventListener('change', this.onInputChange.bind(this));
    this.querySelectorAll('button').forEach((button) => button.addEventListener('click', this.onButtonClick.bind(this)));
  }
  quantityUpdateUnsubscriber = undefined;
  connectedCallback() {
    //redeemGftCard();
    //totalDiscountAmt();
    this.validateQtyRules();
    if (typeof subscribe === 'function') {
      this.quantityUpdateUnsubscriber = subscribe(PUB_SUB_EVENTS.quantityUpdate, this.validateQtyRules.bind(this));
    }
  }
  disconnectedCallback() {
    if (this.quantityUpdateUnsubscriber) {
      this.quantityUpdateUnsubscriber();
    }
  }

  onInputChange(event) {
    this.validateQtyRules();
  }

  onButtonClick(event) {
    event.preventDefault();
    const previousValue = this.input.value;
    let variantID = actionButtonsContainer.getAttribute('variant-id');
    if (event.target.name === 'plus') {
      // Toggle Delete Button On Quantity Change
      if( parseInt(previousValue) === 1 && isInCart(variantID, 'quantity')) {
        actionButtonsContainer.classList.remove('delete-state');
        wasDeleteShown = false;
      }
      this.input.stepUp();
      this.input.value = this.input.value;
      // If Buttons are '+' or '-' are Disabled don't Update the state
      if (!event.target.classList.contains('disabled')) {
        setATBButtonState(actionButtonsContainer.getAttribute('variant-id'));
        if (actionButtonsContainer.classList.contains('in-cart')) {
          actionButtonsContainer.classList.remove('in-cart');
        }
      }
      actionButtonsContainer.setAttribute('quantity', this.input.value);
    } else {
      // Toggle Delete Button On Quantity Change "-"
      if( parseInt(previousValue) === 2 && isInCart(variantID, 'quantity')) {
        actionButtonsContainer.classList.add('delete-state');
        wasDeleteShown = true;
      }
      this.input.stepDown();
      this.input.value = this.input.value;
      // If Buttons are '+' or '-' are Disabled don't Update the state
      if (!event.target.classList.contains('disabled')) {
        setATBButtonState(actionButtonsContainer.getAttribute('variant-id'));
        if (actionButtonsContainer.classList.contains('in-cart')) {
          actionButtonsContainer.classList.remove('in-cart');
        }
      }
      actionButtonsContainer.setAttribute('quantity', this.input.value);
    }
    if (previousValue !== this.input.value) this.input.dispatchEvent(this.changeEvent);
  }

  validateQtyRules() {
    const value = parseInt(this.input.value);
    if (this.input.min) {
      const min = parseInt(this.input.min);
      const buttonMinus = this.querySelector(".quantity__button[name='minus']");
      buttonMinus.classList.toggle('disabled', value <= min);
    }
    if (this.input.max) {
      const max = parseInt(this.input.max);
      const buttonPlus = this.querySelector(".quantity__button[name='plus']");
      buttonPlus.classList.toggle('disabled', value >= max);
    }
  }
}

customElements.define('plp-quantity-input', PLPQuantityInput);

window.addEventListener(
  'DOMContentLoaded',
  () => {
    swiperColorVariants = new Swiper('[data-id="swiperColorVariants"] .swiper', swiperColorVariantsOptions);
    swiperSizeVariants = new Swiper('[data-id="swiperSizeVariants"] .swiper', swiperSizeVariantsOptions);

    productAtbModalOverlay.addEventListener('click', closeATBModal);
    closeATBModalButton.addEventListener('click', closeATBModal);

    ATBButton.addEventListener('click', ATBButtonHandler);
    updateButton.addEventListener('click', updateButtonHandler);
    deleteButton.addEventListener('click', deleteButtonHandler);

    modalBartoClose.addEventListener('touchstart', modalBartoCloseTouchStartHandler, { passive: true });
    modalBartoClose.addEventListener('touchend', modalBartoCloseTouchEndHandler, { passive: true });
    modalBartoClose.addEventListener('touchmove', modalBartoCloseTouchMoveHandler, { passive: true });
  },
  { once: true }
);


function singleVariantSelectATB(){
  if(document.querySelectorAll(".size-button")?.length == 1 ){
      document.querySelector(".size-button").click();
  }
}
</script>


<script>
  function productMsg() {
    let msg = document.querySelector('.product-addedNotification');
    msg.style.display = 'flex';
    setTimeout(removeMsg, 2000);
  }

  function removeMsg() {
    let msg = document.querySelector('.product-addedNotification');
    msg.style.display = 'none';
  }

  function removeOrderMsg() {
    let msg = document.querySelector('.orderValue-exceededNotification');
    msg.style.display = 'none';
  }

  function orderValueExceededMsg() {
    let msgDiv = document.querySelector(".orderValue-exceededNotification");
    msgDiv.style.display = "flex";
    setTimeout(removeOrderMsg, 2000);
  }

  function updateItem(a, b, c) {
    let cartTotal = parseInt(document.querySelector('[data-totalprice]').getAttribute('data-totalprice'));
    let productPrice = parseInt(document.querySelector('.custom-select.addDisplay').closest('.custom-cart-item').getAttribute('cart-variant-price'))/100;
    let prevQty = parseInt(document.querySelector('.custom-select.addDisplay').querySelector('.custom-select-selected').getAttribute('value'));
    let currentTotal = cartTotal - (productPrice * prevQty);
    let newTotal = currentTotal + (productPrice * a);
    if(newTotal <= 49999) {
      let loaders = c.parentElement.parentElement.nextElementSibling;
      loaders.classList.remove('hidden');
      fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: b,
          quantity: a,
        }),
      })
        .then((resp) => resp.json())
        .then((data) => {
          console.log(data, 'data');
          console.log(typeof updateChangedVarinats, 'typeof');
          if (typeof updateChangedVarinats == 'function') updateChangedVarinats(data);
          updateCart(loaders);
          if (screen.width > 768) {
            setTimeout(() => {
              showCartRecommendations();
            }, '3000');
          }
        });
    }
    else{
      // closeATBModal();
      orderValueExceededMsg();
      closeAllCustomCartQty(); 
      closeCartRecommendations();
      document.querySelector('cart-drawer')?.close();
    }
  }

</script>
